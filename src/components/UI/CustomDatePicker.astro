---
/**
 * CustomDatePicker Component
 * 
 * A fully customizable date picker component that can be styled directly with CSS.
 * 
 * Props:
 * - id: string - Unique identifier for the date picker
 * - label: string - Label text for the date picker
 * - minDate: string - Minimum selectable date (YYYY-MM-DD format)
 * - maxDate: string - Maximum selectable date (YYYY-MM-DD format)
 * - initialDate: string - Initial selected date (YYYY-MM-DD format)
 * - validDates: string[] - Array of valid dates (YYYY-MM-DD format)
 * - onChange: function - Callback function when date changes
 */

interface Props {
  id: string;
  label?: string;
  minDate?: string;
  maxDate?: string;
  initialDate?: string;
  validDates?: string[];
  name?: string;
  required?: boolean;
}

const {
  id,
  label = "Select Date",
  minDate,
  maxDate,
  initialDate = "",
  validDates = [],
  name = "",
  required = false
} = Astro.props;

// Get current date in YYYY-MM-DD format
const today = new Date().toISOString().split('T')[0];

// Use provided dates or defaults
const min = minDate || today;
const max = maxDate || new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString().split('T')[0];
const initial = initialDate || min;

// Generate month names for the calendar
const monthNames = [
  "Januar", "Februar", "März", "April", "Mai", "Juni", 
  "Juli", "August", "September", "Oktober", "November", "Dezember"
];

// Generate day names for the calendar
const dayNames = ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"];
---

<div class="custom-date-picker-container">
  {label && (
    <label for={`${id}-input`} class="date-picker-label">{label}</label>
  )}
  
  <div class="date-picker-input-container">
    <input 
      type="text"
      id={`${id}-input`}
      name={name}
      class="date-picker-input"
      placeholder="TT.MM.JJJJ"
      value={initial ? new Date(initial).toLocaleDateString('de-DE') : ""}
      readonly
      required={required}
    />
    <input 
      type="hidden" 
      id={`${id}-value`} 
      name={`${name}-value`}
      value={initial}
    />
    <button type="button" class="date-picker-toggle" aria-label="Kalender öffnen">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
        <line x1="16" y1="2" x2="16" y2="6"></line>
        <line x1="8" y1="2" x2="8" y2="6"></line>
        <line x1="3" y1="10" x2="21" y2="10"></line>
      </svg>
    </button>
  </div>
  
  <div id={`${id}-calendar`} class="date-picker-calendar" data-id={id}>
    <div class="date-picker-header">
      <button type="button" class="date-picker-prev" aria-label="Vorheriger Monat">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
      </button>
      <div class="date-picker-month-year">
        <span class="date-picker-month"></span>
        <span class="date-picker-year"></span>
      </div>
      <button type="button" class="date-picker-next" aria-label="Nächster Monat">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </button>
    </div>
    
    <div class="date-picker-weekdays">
      {dayNames.map(day => (
        <div class="date-picker-weekday">{day}</div>
      ))}
    </div>
    
    <div class="date-picker-days"></div>
  </div>
</div>

<script define:vars={{ id, min, max, initial, validDates, monthNames, dayNames }}>
  // Initialize the date picker immediately without waiting for DOMContentLoaded
  (() => {
    const datePicker = document.getElementById(`${id}-input`);
    const datePickerValue = document.getElementById(`${id}-value`);
    const datePickerToggle = datePicker.nextElementSibling;
    const calendar = document.getElementById(`${id}-calendar`);
    const monthElement = calendar.querySelector('.date-picker-month');
    const yearElement = calendar.querySelector('.date-picker-year');
    const daysContainer = calendar.querySelector('.date-picker-days');
    const prevButton = calendar.querySelector('.date-picker-prev');
    const nextButton = calendar.querySelector('.date-picker-next');
    
    let currentDate = initial ? new Date(initial) : new Date();
    let selectedDate = initial ? new Date(initial) : null;
    
    // Convert validDates array to Date objects for easier comparison
    const validDateObjects = validDates.map(dateStr => {
      const date = new Date(dateStr);
      date.setHours(0, 0, 0, 0);
      return date;
    });
    
    // Function to check if a date is valid
    const isValidDate = (date) => {
      if (validDateObjects.length === 0) return true;
      
      date.setHours(0, 0, 0, 0);
      return validDateObjects.some(validDate => 
        validDate.getTime() === date.getTime()
      );
    };
    
    // Function to check if a date is within min and max
    const isInRange = (date) => {
      const minDate = new Date(min);
      const maxDate = new Date(max);
      minDate.setHours(0, 0, 0, 0);
      maxDate.setHours(23, 59, 59, 999);
      
      return date >= minDate && date <= maxDate;
    };
    
    // Function to render the calendar
    const renderCalendar = () => {
      daysContainer.innerHTML = '';
      
      // Update month and year display
      monthElement.textContent = monthNames[currentDate.getMonth()];
      yearElement.textContent = currentDate.getFullYear();
      
      // Get the first day of the month
      const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
      // Get the last day of the month
      const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
      
      // Get the day of the week for the first day (0 = Sunday, 6 = Saturday)
      const firstDayIndex = firstDay.getDay();
      
      // Create empty cells for days before the first day of the month
      for (let i = 0; i < firstDayIndex; i++) {
        const emptyDay = document.createElement('div');
        emptyDay.classList.add('date-picker-day', 'empty');
        daysContainer.appendChild(emptyDay);
      }
      
      // Create cells for each day of the month
      for (let i = 1; i <= lastDay.getDate(); i++) {
        const dayElement = document.createElement('div');
        dayElement.classList.add('date-picker-day');
        dayElement.textContent = i;
        
        const dayDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);
        
        // Check if the day is within the allowed range
        if (!isInRange(dayDate)) {
          dayElement.classList.add('disabled');
        } else {
          // Check if the day is valid according to validDates
          if (isValidDate(dayDate)) {
            dayElement.classList.add('valid');
          } else {
            dayElement.classList.add('invalid');
          }
          
          // Check if this is the selected date
          if (selectedDate && 
              dayDate.getDate() === selectedDate.getDate() && 
              dayDate.getMonth() === selectedDate.getMonth() && 
              dayDate.getFullYear() === selectedDate.getFullYear()) {
            dayElement.classList.add('selected');
          }
          
          // Add click event to select the date
          dayElement.addEventListener('click', (e) => {
            e.stopPropagation();
            e.preventDefault();
            
            if (dayElement.classList.contains('valid') || validDateObjects.length === 0) {
              // Update selected date
              selectedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);
              
              // Update input value
              const formattedDate = selectedDate.toLocaleDateString('de-DE');
              datePicker.value = formattedDate;
              datePickerValue.value = selectedDate.toISOString().split('T')[0];
              
              // Update calendar
              document.querySelectorAll('.date-picker-day.selected').forEach(el => {
                el.classList.remove('selected');
              });
              dayElement.classList.add('selected');
              
              // Hide calendar
              calendar.classList.remove('open');
              
              // Dispatch change event
              datePicker.dispatchEvent(new Event('change', { bubbles: true }));
              datePickerValue.dispatchEvent(new Event('change', { bubbles: true }));
              
              console.log('Date selected:', datePickerValue.value);
            }
          });
          
          // Make sure the day element is clickable
          dayElement.style.cursor = 'pointer';
        }
        
        daysContainer.appendChild(dayElement);
      }
    };
    
    // Toggle calendar visibility
    datePickerToggle.addEventListener('click', (e) => {
      e.stopPropagation();
      e.preventDefault();
      calendar.classList.toggle('open');
      
      if (calendar.classList.contains('open')) {
        renderCalendar();
        
        // Force a reflow to ensure the calendar is properly rendered
        calendar.getBoundingClientRect();
      }
    });
    
    // Navigate to previous month
    prevButton.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() - 1);
      renderCalendar();
    });
    
    // Navigate to next month
    nextButton.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() + 1);
      renderCalendar();
    });
    
    // Close calendar when clicking outside
    document.addEventListener('click', (e) => {
      if (!calendar.contains(e.target) && e.target !== datePicker && e.target !== datePickerToggle) {
        calendar.classList.remove('open');
      }
    });
    
    // Initial render
    renderCalendar();
    
    // Listen for updateValidDates event
    calendar.addEventListener('updateValidDates', (event) => {
      if (event.detail && event.detail.validDates) {
        // Update the valid dates array
        validDateObjects.length = 0; // Clear the array
        event.detail.validDates.forEach(dateStr => {
          const date = new Date(dateStr);
          date.setHours(0, 0, 0, 0);
          validDateObjects.push(date);
        });
        
        // Re-render the calendar with the new valid dates
        renderCalendar();
      }
    });
    
    // Listen for resetDates event
    calendar.addEventListener('resetDates', (event) => {
      if (event.detail) {
        if (event.detail.fromDate) {
          // Update the from date
          selectedDate = new Date(event.detail.fromDate);
          currentDate = new Date(event.detail.fromDate);
          datePicker.value = selectedDate.toLocaleDateString('de-DE');
          datePickerValue.value = event.detail.fromDate;
        }
        
        // Re-render the calendar
        renderCalendar();
      }
    });
  })();
</script>

<style>
  /* Base container */
  .custom-date-picker-container {
    position: relative;
    width: 100%;
    font-family: system-ui, -apple-system, sans-serif;
  }
  
  /* Label styling */
  .date-picker-label {
    display: block;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: #4b5563;
  }
  
  /* Input container */
  .date-picker-input-container {
    position: relative;
    display: flex;
    align-items: center;
  }
  
  /* Input styling */
  .date-picker-input {
    width: 100%;
    padding: 0.5rem 2.5rem 0.5rem 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    color: #1f2937;
    background-color: #fff;
    cursor: pointer;
  }
  
  /* Toggle button */
  .date-picker-toggle {
    position: absolute;
    right: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: none;
    border: none;
    color: #6b7280;
    cursor: pointer;
  }
  
  /* Calendar container */
  .date-picker-calendar {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    z-index: 10;
    width: 100%;
    max-width: 300px;
    background-color: #fff;
    border: 1px solid #e5e7eb;
    border-radius: 0.375rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    display: none;
    pointer-events: auto; /* Ensure mouse events work */
  }
  
  /* Show calendar when open */
  .date-picker-calendar.open {
    display: block;
  }
  
  /* Calendar header */
  .date-picker-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem;
    border-bottom: 1px solid #e5e7eb;
  }
  
  /* Month and year display */
  .date-picker-month-year {
    font-weight: 600;
    color: #1f2937;
  }
  
  /* Navigation buttons */
  .date-picker-prev,
  .date-picker-next {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    background: none;
    border: 1px solid #e5e7eb;
    border-radius: 9999px;
    color: #4b5563;
    cursor: pointer;
  }
  
  .date-picker-prev:hover,
  .date-picker-next:hover {
    background-color: #f3f4f6;
  }
  
  /* Weekday names */
  .date-picker-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    padding: 0.5rem;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .date-picker-weekday {
    text-align: center;
    font-size: 0.75rem;
    font-weight: 600;
    color: #6b7280;
  }
  
  /* Days grid */
  .date-picker-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    padding: 0.5rem;
  }
  
  /* Day cell */
  .date-picker-day {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 2.5rem;
    font-size: 0.875rem;
    border-radius: 9999px;
    cursor: pointer;
    user-select: none;
    -webkit-user-select: none;
    transition: background-color 0.2s, transform 0.1s;
  }
  
  /* Empty day cell */
  .date-picker-day.empty {
    cursor: default;
    pointer-events: none;
  }
  
  /* Valid day styling */
  .date-picker-day.valid {
    color: #1f2937;
    background-color: #ecfdf5;
    border: 1px solid #10b981;
  }
  
  .date-picker-day.valid:hover {
    background-color: #d1fae5;
    transform: scale(1.1);
  }
  
  .date-picker-day.valid:active {
    transform: scale(0.95);
  }
  
  /* Invalid day styling */
  .date-picker-day.invalid {
    color: #9ca3af;
    cursor: not-allowed;
  }
  
  /* Disabled day styling */
  .date-picker-day.disabled {
    color: #d1d5db;
    cursor: not-allowed;
    pointer-events: none;
  }
  
  /* Selected day styling */
  .date-picker-day.selected {
    background-color: #10b981;
    color: white;
    font-weight: 600;
    transform: scale(1.05);
  }
  
  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .date-picker-label {
      color: #e5e7eb;
    }
    
    .date-picker-input {
      background-color: #1f2937;
      border-color: #4b5563;
      color: #f3f4f6;
    }
    
    .date-picker-toggle {
      color: #9ca3af;
    }
    
    .date-picker-calendar {
      background-color: #1f2937;
      border-color: #4b5563;
    }
    
    .date-picker-header {
      border-color: #4b5563;
    }
    
    .date-picker-month-year {
      color: #f3f4f6;
    }
    
    .date-picker-prev,
    .date-picker-next {
      border-color: #4b5563;
      color: #e5e7eb;
    }
    
    .date-picker-prev:hover,
    .date-picker-next:hover {
      background-color: #374151;
    }
    
    .date-picker-weekdays {
      border-color: #4b5563;
    }
    
    .date-picker-weekday {
      color: #9ca3af;
    }
    
    .date-picker-day.valid {
      color: #ecfdf5;
      background-color: #065f46;
      border-color: #10b981;
    }
    
    .date-picker-day.valid:hover {
      background-color: #047857;
    }
    
    .date-picker-day.invalid {
      color: #6b7280;
    }
    
    .date-picker-day.disabled {
      color: #4b5563;
    }
    
    .date-picker-day.selected {
      background-color: #10b981;
      color: white;
    }
  }
</style>
