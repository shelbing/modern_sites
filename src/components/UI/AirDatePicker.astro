---
/**
 * AirDatePicker Component
 * 
 * A date picker component using Air Datepicker library with range selection
 * and support for highlighting available dates.
 */

interface Props {
  id: string;
  label: string;
  name?: string;
  initialDates?: string[];
  minDate?: string;
  maxDate?: string;
  validDates?: string[];
  required?: boolean;
  mode?: 'range' | 'single';
  highlightAvailableDates?: boolean;
  isArrivalPicker?: boolean;
}

const {
  id,
  label,
  name,
  initialDates = [],
  minDate,
  maxDate,
  validDates = [],
  required = false,
  mode = 'range',
  highlightAvailableDates = false,
  isArrivalPicker = false,
} = Astro.props;
---

<div class="form-control">
  <label for={id} class="label">
    <span class="label-text text-gray-700 dark:text-gray-200">{label}</span>
  </label>
  <div id={`${id}-container`} class="relative">
    <input
      type="text"
      id={id}
      name={name}
      required={required}
      class="input input-bordered w-full bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 border-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-400 focus:ring-blue-500 dark:focus:ring-blue-400"
      readonly
    />
  </div>
</div>

<!-- Air Datepicker CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/air-datepicker@3.3.5/air-datepicker.min.css">

<script define:vars={{ 
  id, 
  initialDates, 
  minDate, 
  maxDate, 
  validDates, 
  mode, 
  highlightAvailableDates,
  isArrivalPicker
}}>
  // Load Air Datepicker script
  function loadScript(src) {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.onload = () => resolve();
      script.onerror = (e) => reject(e);
      document.head.appendChild(script);
    });
  }

  // Initialize the date picker
  async function initializeDatePicker() {
    try {
      // Load Air Datepicker
      await loadScript('https://cdn.jsdelivr.net/npm/air-datepicker@3.3.5/air-datepicker.min.js');
      
      // Wait for the input element to be available
      const input = document.getElementById(id);
      if (!input) {
        console.error(`Input with id ${id} not found`);
        return;
      }
      
      // Format dates for the date picker
      const formatDate = (dateString) => {
        if (!dateString) return null;
        
        // If date has time component, remove it
        if (typeof dateString === 'string' && dateString.includes(' ')) {
          return dateString.split(' ')[0];
        }
        
        return dateString;
      };
      
      // Parse initial dates
      let selectedDates = [];
      if (initialDates && initialDates.length) {
        selectedDates = initialDates.map(date => new Date(formatDate(date)));
      }
      
      // Parse min and max dates
      const parsedMinDate = minDate ? new Date(formatDate(minDate)) : null;
      const parsedMaxDate = maxDate ? new Date(formatDate(maxDate)) : null;
      
      // Parse valid dates
      const parsedValidDates = validDates.map(date => formatDate(date));
      
      // Create a map of valid dates for faster lookup
      const validDatesMap = {};
      parsedValidDates.forEach(date => {
        validDatesMap[date] = true;
      });
      
      // Function to directly color valid dates green in the DOM
      function colorValidDatesGreen() {
        if (!isArrivalPicker) return;
        
        // Get all day cells in the current calendar
        const dayCells = document.querySelectorAll(`#${id}-air-datepicker .air-datepicker-cell.-day-`);
        
        // Loop through each day cell
        dayCells.forEach(cell => {
          // Get the date from the cell
          const day = parseInt(cell.textContent.trim());
          if (isNaN(day)) return;
          
          // Get the current month and year from the calendar
          const monthYear = document.querySelector(`#${id}-air-datepicker .air-datepicker-nav--title`).textContent;
          const [month, year] = monthYear.split(' ');
          
          // Map German month names to numbers
          const monthMap = {
            'Januar': '01', 'Februar': '02', 'März': '03', 'April': '04',
            'Mai': '05', 'Juni': '06', 'Juli': '07', 'August': '08',
            'September': '09', 'Oktober': '10', 'November': '11', 'Dezember': '12'
          };
          
          // Format the date as YYYY-MM-DD
          const monthNum = monthMap[month];
          const dayStr = day < 10 ? `0${day}` : `${day}`;
          const dateStr = `${year}-${monthNum}-${dayStr}`;
          
          // Check if this date is in our valid dates
          if (validDatesMap[dateStr]) {
            // Apply green styling directly
            cell.style.backgroundColor = '#10b981';
            cell.style.color = 'white';
            cell.style.fontWeight = 'bold';
            cell.style.borderRadius = '50%';
          }
        });
      }
      
      // Initialize Air Datepicker
      const datepicker = new AirDatepicker(input, {
        locale: {
          days: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'],
          daysShort: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
          daysMin: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
          months: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],
          monthsShort: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
          today: 'Heute',
          clear: 'Löschen',
          dateFormat: 'dd.MM.yyyy',
          timeFormat: 'HH:mm',
          firstDay: 1
        },
        onRenderCell({date, cellType}) {
          // Skip non-day cells
          if (cellType !== 'day') return {};
        },
        navTitles: {
          days: 'MMMM yyyy'
        },
        // This function runs when the calendar month changes
        onChangeMonth(month) {
          // If this is an arrival picker, color the valid dates green
          if (isArrivalPicker) {
            setTimeout(() => {
              colorValidDatesGreen();
            }, 10);
          }
        },
        // This function runs after the calendar is rendered
        onShow() {
          // If this is an arrival picker, color the valid dates green
          if (isArrivalPicker) {
            setTimeout(() => {
              colorValidDatesGreen();
            }, 10);
          }
        },
        dateFormat: 'dd.MM.yyyy',
        autoClose: true,
        minDate: parsedMinDate,
        maxDate: parsedMaxDate,
        selectedDates: selectedDates,
        range: mode === 'range',
        multipleDates: mode === 'range',
        container: `#${id}-container`,
        onSelect: ({ date, formattedDate, datepicker }) => {
          // Create a custom event with the selected date(s)
          const event = new CustomEvent('dateSelected', {
            detail: {
              date: date,
              formattedDate: formattedDate,
              isoDate: Array.isArray(date) 
                ? date.map(d => d.toISOString().split('T')[0]) 
                : date.toISOString().split('T')[0]
            },
            bubbles: true
          });
          
          // Dispatch the event
          input.dispatchEvent(event);
        },
        onRenderCell: ({ date, cellType }) => {
          // Only customize day cells
          if (cellType !== 'day') return {};
          
          // Format the date to match our valid dates format
          const dateString = date.toISOString().split('T')[0];
          
          // Check if the date is in our valid dates
          const isAvailable = validDatesMap[dateString];
          
          // Only apply custom styling if we're highlighting available dates
          if (highlightAvailableDates) {
            if (isArrivalPicker) {
              // For arrival date picker, make available dates green
              return {
                classes: isAvailable ? 'arrival-date' : 'unavailable-date',
                disabled: parsedValidDates.length > 0 && !isAvailable,
                html: isAvailable ? `<span style="color: #10b981; font-weight: bold;">${date.getDate()}</span>` : undefined
              };
            } else {
              // For departure date picker, use regular available date styling
              return {
                classes: isAvailable ? 'available-date' : 'unavailable-date',
                disabled: parsedValidDates.length > 0 && !isAvailable
              };
            }
          }
          
          return {};
        }
      });
      
      // Store the datepicker instance for later reference
      window.datepickers = window.datepickers || {};
      window.datepickers[id] = datepicker;
      
    } catch (error) {
      console.error('Error initializing Air Datepicker:', error);
    }
  }
  
  // Initialize when the DOM is ready
  document.addEventListener('DOMContentLoaded', initializeDatePicker);
</script>

<style>
  /* Custom styling for the date picker */
  :global(.air-datepicker) {
    --adp-font-family: inherit;
    --adp-font-size: 0.875rem;
    --adp-width: 250px;
    --adp-day-name-color: #6b7280;
    --adp-background-color: #ffffff;
    --adp-background-color-hover: #f3f4f6;
    --adp-background-color-active: #3b82f6;
    --adp-background-color-in-range: #dbeafe;
    --adp-color: #1f2937;
    --adp-color-secondary: #6b7280;
    --adp-accent-color: #3b82f6;
    --adp-color-current-date: #3b82f6;
    --adp-border-color: #e5e7eb;
    --adp-border-color-inner: #e5e7eb;
    --adp-border-radius: 0.375rem;
    --adp-nav-height: 32px;
    --adp-nav-arrow-color: #6b7280;
    --adp-nav-action-size: 32px;
    --adp-day-size: 32px;
    --adp-time-height: 40px;
    font-size: 0.875rem;
  }
  
  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    :global(.air-datepicker) {
      --adp-background-color: #1f2937;
      --adp-background-color-hover: #374151;
      --adp-color: #f3f4f6;
      --adp-color-secondary: #9ca3af;
      --adp-border-color: #374151;
      --adp-border-color-inner: #374151;
      --adp-day-name-color: #9ca3af;
      --adp-nav-arrow-color: #9ca3af;
    }
  }
  
  /* Custom styling for available dates */
  :global(.available-date) {
    color: #10b981 !important;
    font-weight: bold;
  }
  
  /* Custom styling for arrival dates (bright green) */
  :global(.air-datepicker-cell.-day-.arrival-date) {
    background-color: #10b981 !important;
  }
  
  :global(.air-datepicker-cell.-day-.arrival-date span) {
    color: white !important;
    font-weight: bold !important;
  }
  
  :global(.air-datepicker-cell.-day-.arrival-date:hover) {
    background-color: #0d9668 !important;
  }
  
  /* Add a green circle around available dates */
  :global(.air-datepicker-cell.-day-.arrival-date::before) {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 32px;
    height: 32px;
    background-color: #10b981;
    border-radius: 50%;
    z-index: -1;
  }
  
  /* Custom styling for unavailable dates */
  :global(.unavailable-date) {
    color: #9ca3af !important;
    text-decoration: line-through;
  }
  
  /* Custom calendar icon */
  .form-control {
    position: relative;
  }
  
  .form-control::after {
    content: "";
    position: absolute;
    right: 10px;
    top: 50%;
    width: 24px;
    height: 24px;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23000000' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='4' width='18' height='18' rx='2' ry='2'%3E%3C/rect%3E%3Cline x1='16' y1='2' x2='16' y2='6'%3E%3C/line%3E%3Cline x1='8' y1='2' x2='8' y2='6'%3E%3C/line%3E%3Cline x1='3' y1='10' x2='21' y2='10'%3E%3C/line%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: center;
    background-size: 20px;
    pointer-events: none;
    transform: translateY(-50%);
    z-index: 1;
  }
  
  /* Dark mode icon */
  @media (prefers-color-scheme: dark) {
    .form-control::after {
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='4' width='18' height='18' rx='2' ry='2'%3E%3C/rect%3E%3Cline x1='16' y1='2' x2='16' y2='6'%3E%3C/line%3E%3Cline x1='8' y1='2' x2='8' y2='6'%3E%3C/line%3E%3Cline x1='3' y1='10' x2='21' y2='10'%3E%3C/line%3E%3C/svg%3E");
    }
  }
</style>
