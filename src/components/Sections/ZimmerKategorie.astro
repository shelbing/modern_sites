---
/**
 * ZimmerKategorie Component
 * 
 * This component represents a hotel room category card with a flip effect.
 * It displays room information, images, and booking options.
 * 
 * Features:
 * - Displays room category name, size, and capacity
 * - Shows a slider with room images
 * - Provides a flip effect to show more details on the back
 * - Includes "More Info" and "Book" buttons
 * - Responsive design
 * - Dark mode support
 * 
 * Props:
 * - blok: An object containing room category data from Storyblok CMS
 * - lang: The current language code (e.g., 'en', 'de', 'fr', 'es')
 * 
 * Usage:
 * <ZimmerKategorie blok={roomCategoryData} lang={currentLanguage} />
 */

import Image from "../Base/Image.astro";
import { renderRichText } from '@storyblok/astro'
import Slider from "../Base/Slider.astro";
import { getColor } from '../../config/colors.js';

interface ZimmerKategorieProps {
  blok: {
    Kategoriebezeichnung: string;
    Beschreibung: any; // Type for Storyblok's rich text
    CardBackground?: string; // Optional custom card background color
    Teaserbild: string | string[] | { filename: string };
    Groesse: string;
    MaxKapazitaet: number;
    Header: string;
  };
  lang: string;
}

const { blok, lang } = Astro.props as ZimmerKategorieProps;
const text = renderRichText(blok.Beschreibung);

// Determine room type based on the room name/category
function determineRoomType(roomName: string): 'standard' | 'deluxe' | 'suite' {
  const lowerCaseName = roomName.toLowerCase();
  if (lowerCaseName.includes('suite') || lowerCaseName.includes('premium')) {
    return 'suite';
  } else if (lowerCaseName.includes('deluxe') || lowerCaseName.includes('superior')) {
    return 'deluxe';
  } else {
    return 'standard';
  }
}

// Get room card background colors based on room type
function getRoomCardColors(roomType: 'standard' | 'deluxe' | 'suite'): string {
  const cardBgLight = getColor(`roomCard.${roomType}.background`) || getColor('roomCard.background') || 'white';
  const cardBgDark = getColor(`roomCard.${roomType}.darkModeBackground`) || getColor('roomCard.darkModeBackground') || 'gray-800';
  return `bg-${cardBgLight} dark:bg-${cardBgDark}`;
}

// Get the room type and background color
const roomType = determineRoomType(blok.Kategoriebezeichnung);
const roomCardColorClass = blok.CardBackground || getRoomCardColors(roomType);

// Function to get a random positive adjective based on language
function getRandomWord(lang: string): string {
  const words = {
    de: ["Toll", "Super", "Wunderbar", "Fantastisch", "Großartig", "Herrlich", "Ausgezeichnet", "Prächtig", "Fabelhaft", "Erstaunlich", "Beeindruckend", "Phänomenal", "Hervorragend", "Exzellent", "Brillant", "Spektakulär", "Außergewöhnlich", "Grandios", "Sensationell", "Umwerfend"],
    en: ["Great", "Awesome", "Wonderful", "Fantastic", "Superb", "Excellent", "Magnificent", "Fabulous", "Amazing", "Impressive", "Phenomenal", "Outstanding", "Brilliant", "Spectacular", "Extraordinary", "Marvelous", "Sensational", "Stunning", "Terrific", "Incredible"],
    fr: ["Génial", "Super", "Merveilleux", "Fantastique", "Formidable", "Excellent", "Magnifique", "Fabuleux", "Incroyable", "Impressionnant", "Phénoménal", "Remarquable", "Brillant", "Spectaculaire", "Extraordinaire", "Grandiose", "Sensationnel", "Époustouflant", "Superbe", "Exceptionnel"],
    es: ["Genial", "Estupendo", "Maravilloso", "Fantástico", "Magnífico", "Excelente", "Espléndido", "Fabuloso", "Increíble", "Impresionante", "Fenomenal", "Sobresaliente", "Brillante", "Espectacular", "Extraordinario", "Grandioso", "Sensacional", "Asombroso", "Estupendo", "Excepcional"]
  };
  const languageWords = words[lang as keyof typeof words] || words.en; // Default to English if language not found
  return languageWords[Math.floor(Math.random() * languageWords.length)];
}

// Function to modify Cloudinary URLs to use relative paths
function modifyCloudinaryUrl(url: string): string {
  const cloudinaryPrefix = 'https://res.cloudinary.com/dgyarghwg/image/upload/';
  if (url.startsWith(cloudinaryPrefix)) {
    const parts = url.split('/');
    const siriusIndex = parts.indexOf('sirius');
    if (siriusIndex !== -1) {
      return '/' + parts.slice(siriusIndex).join('/');
    }
  }
  return url; // Return original URL if it doesn't match the expected format
}

interface BildDaten {
  imageUrl: string;
  height: number;
  width: number;
  backgroundRemoval: boolean;
  badges: Array<{
    text: string;
    position: string;
    color: string;
  }>;
}

// Function to generate an array of image data for the slider
function generateBildDatenArray(blok: ZimmerKategorieProps['blok'], lang: string): BildDaten[] {
  const teazerbilder = Array.isArray(blok.Teaserbild) ? blok.Teaserbild : [blok.Teaserbild].filter(Boolean);
  
  // Consistent hotel brand colors
  const nameColor = '#2c5282';  // Deep blue for names
  const detailColor = '#4a5568'; // Slate gray for details

  return teazerbilder.map(teaserbild => {
    const randomWord = getRandomWord(lang);
    
    let imageUrl: string;
    if (typeof teaserbild === 'object' && teaserbild !== null && 'filename' in teaserbild) {
      imageUrl = modifyCloudinaryUrl(teaserbild.filename);
    } else {
      imageUrl = modifyCloudinaryUrl(teaserbild as string);
    }

    return {
      imageUrl: imageUrl,
      backgroundRemoval: false,
      height: 180,
      width: 300,
      badges: [
        { text: blok.Groesse + " m²", position: "upper-left", color: detailColor },
        { text: `${randomWord} ${lang === 'en' ? 'for' : lang === 'fr' ? 'pour' : lang === 'es' ? 'para' : 'für'} ${blok.MaxKapazitaet} ${lang === 'en' ? 'people' : lang === 'fr' ? 'personnes' : lang === 'es' ? 'personas' : 'Personen'}`, position: "upper-right", color: nameColor }
      ]
    };
  });
}

const bildDaten = generateBildDatenArray(blok, lang);

// Function to get translated button text
function getTranslatedText(key: string, lang: string): string {
  const translations = {
    moreInfo: {
      en: "More Info",
      de: "Mehr erfahren",
      fr: "En savoir plus",
      es: "Más información"
    },
    book: {
      en: "Book",
      de: "Buchen",
      fr: "Réserver",
      es: "Reservar"
    },
    back: {
      en: "Back",
      de: "Zurück",
      fr: "Retour",
      es: "Volver"
    }
  };
  return translations[key as keyof typeof translations][lang as keyof typeof translations[keyof typeof translations]] || translations[key as keyof typeof translations].en;
}
---

<div class="hotel-card-container mb-4">
  <div class="hotel-card">
    <div class="hotel-card-front shadow-lg dark:shadow-gray-900/30 p-4 rounded-lg" class:list={[roomCardColorClass]}>
      <h1 class="text-gray-900 dark:text-gray-100 font-bold text-xl mb-2 text-center">
        {blok.Kategoriebezeichnung}
      </h1>
      <Slider width="380px" height="220px" interval={4000}>
        {bildDaten.map((bildDaten) => (
          <div class="flex overflow-hidden">
            <Image blok={bildDaten} loading="eager"/>
          </div>
        ))}
      </Slider>
      <h2 class="text-base p-2 text-gray-700 dark:text-gray-200">
        {blok.Header}
      </h2>
      <div class="button-container">
        <button class="bg-gray-200 hover:bg-gray-300 text-gray-800 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white p-2 w-[160px] text-button font-bold rounded-md transition-colors duration-200">
          {getTranslatedText('moreInfo', lang)}
        </button>
        <a href={`/${lang}/buchung`}>
          <button class="bg-blue-700 hover:bg-blue-800 w-[160px] text-white dark:bg-blue-800 dark:hover:bg-blue-700 dark:text-white p-2 text-button font-bold rounded-md transition-colors duration-200">
            {getTranslatedText('book', lang)}
          </button>
        </a>
      </div>
    </div>
    <div class="hotel-card-back bg-white dark:bg-gray-800 shadow-lg dark:shadow-gray-900/30 p-4 rounded-lg rich-text text-rich-desktop md:text-rich-tablet sm:text-rich-mobile">
      <div class="content-wrapper">
        <div class="prose dark:prose-invert max-w-none" set:html={text}></div>
      </div>
      <div class="button-container mt-4">
        <button class="bg-gray-200 hover:bg-gray-300 text-gray-800 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white p-2 w-[160px] text-button font-bold rounded-md transition-colors duration-200">
          {getTranslatedText('back', lang)}
        </button>
        <a href={`/${lang}/buchung`}>
          <button class="bg-blue-700 hover:bg-blue-800 w-[160px] text-white dark:bg-blue-800 dark:hover:bg-blue-700 dark:text-white p-2 text-button font-bold rounded-md transition-colors duration-200">
            {getTranslatedText('book', lang)}
          </button>
        </a>
      </div>
    </div>
  </div>
</div>

<style>
  .hotel-card-container {
    width: 400px;
    height: 400px;
    perspective: 1000px;
  }
  
  .hotel-card {
    width: 100%;
    height: 100%;
    position: relative;
    transition: transform 0.6s;
    transform-style: preserve-3d;
    cursor: pointer;
  }
  
  .hotel-card.is-flipped {
    transform: rotateY(180deg);
  }
  
  .hotel-card-front,
  .hotel-card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    display: flex;
    flex-direction: column;
  }
  
  .hotel-card-back {
    transform: rotateY(180deg);
  }

  .content-wrapper {
    flex: 1;
    @apply text-gray-700 dark:text-gray-200;
  }

  .button-container {
    display: flex;
    justify-content: space-between;
    padding: 0 0.5rem;
  }

  /* Rich text styles with dark mode support */
  .rich-text :global(p) {
    @apply text-gray-700 dark:text-gray-200 leading-snug mb-2 last:mb-0;
  }

  .rich-text :global(h1) {
    @apply text-gray-900 dark:text-gray-100 text-center font-bold text-h4 mb-2;
  }

  .rich-text :global(h2) {
    @apply text-gray-800 dark:text-gray-200 font-bold text-h5 mb-2;
  }

  .rich-text :global(h3) {
    @apply text-gray-800 dark:text-gray-200 font-bold text-h6 mb-1;
  }

  /* Hover effects for buttons */
  .hotel-card button {
    transition: all 0.3s ease;
  }

  .hotel-card button:hover {
    transform: translateY(-2px);
    @apply shadow-md dark:shadow-gray-900/30;
  }
</style>

<script>
  // Function to set up the card flip functionality
  function setupCardFlip() {
    const cards = document.querySelectorAll('.hotel-card');
    cards.forEach(card => {
      card.addEventListener('click', () => {
        card.classList.toggle('is-flipped');
      });
    });
  }

  // Run the setup function when the DOM is loaded
  document.addEventListener('DOMContentLoaded', setupCardFlip);

  // If you're using Astro's view transitions, also run the setup after page transitions
  document.addEventListener('astro:after-swap', setupCardFlip);
</script>