---
interface Props {
  size?: 'small' | 'medium' | 'large';
  color?: string;
  minDuration?: number;
}

const { size = 'large', color = '#000000', minDuration = 0 } = Astro.props;

const dimensions = {
  small: 24,
  medium: 32,
  large: 96,
};

const width = dimensions[size];
---

<div id="loading-container" class="loading-container" data-min-duration={minDuration}>
  <div class="loading-overlay"></div>
  <div class="loading" aria-label="Loading">
    <div class="spinner" style={`width: ${width}px; height: ${width}px;`}></div>
  </div>
</div>

<style define:vars={{ color, width }}>
  .loading-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  }
  .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.5);
    z-index: -1;
  }
  .loading {
    display: inline-block;
  }
  .spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-left-color: var(--color);
    border-radius: 50%;
    width: var(--width);
    height: var(--width);
    animation: spin 1s linear infinite;
  }
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>

<script>
  const loadingContainer = document.getElementById('loading-container');
  if (loadingContainer) {
    const startTime = Date.now();
    const minDuration = parseInt(loadingContainer.dataset.minDuration || '0', 10);

    window.addEventListener('load', () => {
      const elapsedTime = Date.now() - startTime;
      const remainingTime = Math.max(0, minDuration - elapsedTime);

      setTimeout(() => {
        loadingContainer.style.opacity = '0';
        loadingContainer.style.transition = 'opacity 0.3s ease-out';
        setTimeout(() => {
          loadingContainer.remove();
        }, 300);
      }, remainingTime);
    });
  }
</script>
